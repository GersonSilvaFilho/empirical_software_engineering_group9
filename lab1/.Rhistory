)
g7 <- data.frame(
Language= rep('Java', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_itelij, X_experience = experience_senior)
)
g8 <- data.frame(
Language= rep('C++', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_itelij, X_experience = experience_senior)
)
g9 <- data.frame(
Language= rep('Python', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_itelij, X_experience = experience_senior)
)
g10 <- data.frame(
Language= rep('Java', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_visual_studio, X_experience = experience_senior)
)
g11 <- data.frame(
Language= rep('C++', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_visual_studio, X_experience = experience_senior)
)
g12 <- data.frame(
Language= rep('Python', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_visual_studio, X_experience = experience_senior)
)
n<-1
all_groups <- list(g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12)
#creating an empty data frame from an existing one (with the same column)
d<-g1[0,]
for(g in all_groups) {
d<-rbind(d, dplyr::sample_n(g, size=n)) #appending rows at the end for every group
}
d$Language<-as.factor(d$Language)
d$IDE<-as.factor(d$IDE)
d$Experience<-as.factor(d$Experience)
levels(d$Language) <- c("C++","Java", "Python")
d
levels(d$IDE) <- c("Intelij", "Visual Studio")
d
library(rmarkdown)
N<-1000
amount_of_code_model <- function(N, X_lang, X_ide, X_experience) {
ref <- 100 #Intercept/reference group. This is java, intelij and junior
#main effects
lang_cpp <- 5000
lang_python <- -2000
ide_visual_studio <- -10
xp_senior <- 60
# second order interactions
lang_cpp_ide_visual_studio <- -1.0
lang_python_ide_visual_studio <- 0.0
lang_python_xp_senior <- 5.0
lang_cpp_xp_senior <- 10.0
ide_visual_studio_xp_senior <- 3.0
#third order interactions
lang_cpp_xp_senior_ide_visual_studio <- 1.0
lang_python_xp_senior_ide_visual_studio <- 0.0
#input
x_lang_cpp <- X_lang[1]
x_lang_python <- X_lang[2]
x_ide_visual_studio <- X_ide[1]
x_senior <- X_experience[1]
response_std <- 0.0
#This is the linear model that controls the response variable
y <- ref+ #lang_cpp*x_lang_cpp+lang_python*x_lang_python +
# ide_visual_studio  * x_ide_visual_studio # +
xp_senior * x_senior# +
#
# lang_cpp_ide_visual_studio * x_lang_cpp * x_ide_visual_studio +
# lang_python_ide_visual_studio * x_lang_python *x_ide_visual_studio +
# lang_python_xp_senior * x_lang_python * x_senior +
# lang_cpp_xp_senior * x_lang_cpp * x_senior +
# ide_visual_studio_xp_senior * x_senior * x_ide_visual_studio +
#
# lang_cpp_xp_senior_ide_visual_studio * x_lang_cpp * x_ide_visual_studio * x_senior +
# lang_python_xp_senior_ide_visual_studio * x_lang_python * x_ide_visual_studio * x_senior
#
y_out<- rnorm(N, mean=y, sd = response_std) # This generates a normal distribution
# if(likert)
#  y_out<- findInterval(y_out,vec=c(-Inf,-2.5,-1, 1,2.5,Inf)+ref)
# this is fairly unbiased for standard deviation of 1 in the responses and 0 mean.
# That is why we add the value of the reference group.
# Here the reference will have a mean of 3 in likert scale
return(y_out)
}
set.seed(8649)
language_java <- c(0,0)
language_cpp <- c(1,0)
language_python <- c(0,1)
i_itelij <- c(0)
i_visual_studio <- c(1)
experience_junior <- c(0)
experience_senior <- c(1)
g1 <- data.frame(
Language= rep('Java', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_itelij, X_experience = experience_junior)
)
g2 <- data.frame(
Language= rep('C++', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_itelij, X_experience = experience_junior)
)
g3 <- data.frame(
Language= rep('Python', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_itelij, X_experience = experience_junior)
)
g4 <- data.frame(
Language= rep('Java', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_visual_studio, X_experience = experience_junior)
)
g5 <- data.frame(
Language= rep('C++', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_visual_studio, X_experience = experience_junior)
)
g6 <- data.frame(
Language= rep('Python', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_visual_studio, X_experience = experience_junior)
)
g7 <- data.frame(
Language= rep('Java', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_itelij, X_experience = experience_senior)
)
g8 <- data.frame(
Language= rep('C++', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_itelij, X_experience = experience_senior)
)
g9 <- data.frame(
Language= rep('Python', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_itelij, X_experience = experience_senior)
)
g10 <- data.frame(
Language= rep('Java', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_visual_studio, X_experience = experience_senior)
)
g11 <- data.frame(
Language= rep('C++', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_visual_studio, X_experience = experience_senior)
)
g12 <- data.frame(
Language= rep('Python', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_visual_studio, X_experience = experience_senior)
)
n<-1
all_groups <- list(g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12)
#creating an empty data frame from an existing one (with the same column)
d<-g1[0,]
for(g in all_groups) {
d<-rbind(d, dplyr::sample_n(g, size=n)) #appending rows at the end for every group
}
d$Language<-as.factor(d$Language)
d$IDE<-as.factor(d$IDE)
d$Experience<-as.factor(d$Experience)
levels(d$Language) <- c("C++","Java", "Python")
levels(d$IDE) <- c("Intelij", "Visual Studio")
d
levels(d$Experience) <- c("Junior", "Senior")
d
source('C:/Users/Anton/Desktop/MPSOF-1/Emperic/git/empirical_software_engineering_group9/lab3/lab3_script_group9.R', echo=TRUE)
d
source('C:/Users/Anton/Desktop/MPSOF-1/Emperic/git/empirical_software_engineering_group9/lab3/lab3_script_group9.R', echo=TRUE)
d
m1
summary(m1)
d
source('C:/Users/Anton/Desktop/MPSOF-1/Emperic/git/empirical_software_engineering_group9/lab3/lab3_script_group9.R', echo=TRUE)
d
source('C:/Users/Anton/Desktop/MPSOF-1/Emperic/git/empirical_software_engineering_group9/lab3/lab3_script_group9.R', echo=TRUE)
d
summary(m1)
library(rmarkdown)
N<-1000
amount_of_code_model <- function(N, X_lang, X_ide, X_experience) {
ref <- 100 #Intercept/reference group. This is java, intelij and junior
#main effects
lang_cpp <- 50
lang_python <- -30
ide_visual_studio <- -10
xp_senior <- 30
# second order interactions
lang_cpp_ide_visual_studio <- 20
lang_python_ide_visual_studio <- -20
lang_python_xp_senior <- 10
lang_cpp_xp_senior <- 10
ide_visual_studio_xp_senior <- 20
#third order interactions
lang_cpp_xp_senior_ide_visual_studio <- 10
lang_python_xp_senior_ide_visual_studio <- -15
#input
x_lang_cpp <- X_lang[1]
x_lang_python <- X_lang[2]
x_ide_visual_studio <- X_ide[1]
x_senior <- X_experience[1]
response_std <- 0.0
#This is the linear model that controls the response variable
y <- ref+ lang_cpp*x_lang_cpp+lang_python*x_lang_python +
ide_visual_studio  * x_ide_visual_studio +
xp_senior * x_senior +
lang_cpp_ide_visual_studio * x_lang_cpp * x_ide_visual_studio +
lang_python_ide_visual_studio * x_lang_python *x_ide_visual_studio +
lang_python_xp_senior * x_lang_python * x_senior +
lang_cpp_xp_senior * x_lang_cpp * x_senior +
ide_visual_studio_xp_senior * x_senior * x_ide_visual_studio +
lang_cpp_xp_senior_ide_visual_studio * x_lang_cpp * x_ide_visual_studio * x_senior +
lang_python_xp_senior_ide_visual_studio * x_lang_python * x_ide_visual_studio * x_senior
y_out<- rnorm(N, mean=y, sd = response_std) # This generates a normal distribution
# if(likert)
#  y_out<- findInterval(y_out,vec=c(-Inf,-2.5,-1, 1,2.5,Inf)+ref)
# this is fairly unbiased for standard deviation of 1 in the responses and 0 mean.
# That is why we add the value of the reference group.
# Here the reference will have a mean of 3 in likert scale
return(y_out)
}
set.seed(8649)
language_java <- c(0,0)
language_cpp <- c(1,0)
language_python <- c(0,1)
i_itelij <- c(0)
i_visual_studio <- c(1)
experience_junior <- c(0)
experience_senior <- c(1)
g1 <- data.frame(
Language= rep('Java', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_itelij, X_experience = experience_junior)
)
g2 <- data.frame(
Language= rep('C++', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_itelij, X_experience = experience_junior)
)
g3 <- data.frame(
Language= rep('Python', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_itelij, X_experience = experience_junior)
)
g4 <- data.frame(
Language= rep('Java', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_visual_studio, X_experience = experience_junior)
)
g5 <- data.frame(
Language= rep('C++', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_visual_studio, X_experience = experience_junior)
)
g6 <- data.frame(
Language= rep('Python', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_visual_studio, X_experience = experience_junior)
)
g7 <- data.frame(
Language= rep('Java', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_itelij, X_experience = experience_senior)
)
g8 <- data.frame(
Language= rep('C++', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_itelij, X_experience = experience_senior)
)
g9 <- data.frame(
Language= rep('Python', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_itelij, X_experience = experience_senior)
)
g10 <- data.frame(
Language= rep('Java', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_visual_studio, X_experience = experience_senior)
)
g11 <- data.frame(
Language= rep('C++', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_visual_studio, X_experience = experience_senior)
)
g12 <- data.frame(
Language= rep('Python', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_visual_studio, X_experience = experience_senior)
)
n<-1
all_groups <- list(g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12)
#creating an empty data frame from an existing one (with the same column)
d<-g1[0,]
for(g in all_groups) {
d<-rbind(d, dplyr::sample_n(g, size=n)) #appending rows at the end for every group
}
d$Language<-as.factor(d$Language)
d$IDE<-as.factor(d$IDE)
d$Experience<-as.factor(d$Experience)
d
summary(d)
levels(d$Language)
d2 <- within(d, Laungage <- relevel(Language,ref=2))
d2
summary(d2)
d2 <- within(d, Language <- relevel(Language,ref=2))
d2
summary(d2)
library(rmarkdown)
N<-1000
amount_of_code_model <- function(N, X_lang, X_ide, X_experience) {
ref <- 100 #Intercept/reference group. This is java, intelij and junior
#main effects
lang_cpp <- 50
lang_python <- -30
ide_visual_studio <- -10
xp_senior <- 30
# second order interactions
lang_cpp_ide_visual_studio <- 20
lang_python_ide_visual_studio <- -20
lang_python_xp_senior <- 10
lang_cpp_xp_senior <- 10
ide_visual_studio_xp_senior <- 20
#third order interactions
lang_cpp_xp_senior_ide_visual_studio <- 10
lang_python_xp_senior_ide_visual_studio <- -15
#input
x_lang_cpp <- X_lang[1]
x_lang_python <- X_lang[2]
x_ide_visual_studio <- X_ide[1]
x_senior <- X_experience[1]
response_std <- 0.0
#This is the linear model that controls the response variable
y <- ref+ lang_cpp*x_lang_cpp+lang_python*x_lang_python +
ide_visual_studio  * x_ide_visual_studio +
xp_senior * x_senior +
lang_cpp_ide_visual_studio * x_lang_cpp * x_ide_visual_studio +
lang_python_ide_visual_studio * x_lang_python *x_ide_visual_studio +
lang_python_xp_senior * x_lang_python * x_senior +
lang_cpp_xp_senior * x_lang_cpp * x_senior +
ide_visual_studio_xp_senior * x_senior * x_ide_visual_studio +
lang_cpp_xp_senior_ide_visual_studio * x_lang_cpp * x_ide_visual_studio * x_senior +
lang_python_xp_senior_ide_visual_studio * x_lang_python * x_ide_visual_studio * x_senior
y_out<- rnorm(N, mean=y, sd = response_std) # This generates a normal distribution
# if(likert)
#  y_out<- findInterval(y_out,vec=c(-Inf,-2.5,-1, 1,2.5,Inf)+ref)
# this is fairly unbiased for standard deviation of 1 in the responses and 0 mean.
# That is why we add the value of the reference group.
# Here the reference will have a mean of 3 in likert scale
return(y_out)
}
set.seed(8649)
language_java <- c(0,0)
language_cpp <- c(1,0)
language_python <- c(0,1)
i_itelij <- c(0)
i_visual_studio <- c(1)
experience_junior <- c(0)
experience_senior <- c(1)
g1 <- data.frame(
Language= rep('Java', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_itelij, X_experience = experience_junior)
)
g2 <- data.frame(
Language= rep('C++', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_itelij, X_experience = experience_junior)
)
g3 <- data.frame(
Language= rep('Python', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_itelij, X_experience = experience_junior)
)
g4 <- data.frame(
Language= rep('Java', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_visual_studio, X_experience = experience_junior)
)
g5 <- data.frame(
Language= rep('C++', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_visual_studio, X_experience = experience_junior)
)
g6 <- data.frame(
Language= rep('Python', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_visual_studio, X_experience = experience_junior)
)
g7 <- data.frame(
Language= rep('Java', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_itelij, X_experience = experience_senior)
)
g8 <- data.frame(
Language= rep('C++', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_itelij, X_experience = experience_senior)
)
g9 <- data.frame(
Language= rep('Python', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_itelij, X_experience = experience_senior)
)
g10 <- data.frame(
Language= rep('Java', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_visual_studio, X_experience = experience_senior)
)
g11 <- data.frame(
Language= rep('C++', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_visual_studio, X_experience = experience_senior)
)
g12 <- data.frame(
Language= rep('Python', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_visual_studio, X_experience = experience_senior)
)
n<-1
all_groups <- list(g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12)
#creating an empty data frame from an existing one (with the same column)
d<-g1[0,]
for(g in all_groups) {
d<-rbind(d, dplyr::sample_n(g, size=n)) #appending rows at the end for every group
}
d$Language<-as.factor(d$Language)
d$IDE<-as.factor(d$IDE)
d$Experience<-as.factor(d$Experience)
d2 <- within(d, Language <- relevel(Language,ref=2))
library(rmarkdown)
N<-1000
amount_of_code_model <- function(N, X_lang, X_ide, X_experience) {
ref <- 100 #Intercept/reference group. This is java, intelij and junior
#main effects
lang_cpp <- 50
lang_python <- -30
ide_visual_studio <- -10
xp_senior <- 30
# second order interactions
lang_cpp_ide_visual_studio <- 20
lang_python_ide_visual_studio <- -20
lang_python_xp_senior <- 10
lang_cpp_xp_senior <- 10
ide_visual_studio_xp_senior <- 20
#third order interactions
lang_cpp_xp_senior_ide_visual_studio <- 10
lang_python_xp_senior_ide_visual_studio <- -15
#input
x_lang_cpp <- X_lang[1]
x_lang_python <- X_lang[2]
x_ide_visual_studio <- X_ide[1]
x_senior <- X_experience[1]
response_std <- 0.0
#This is the linear model that controls the response variable
y <- ref+ lang_cpp*x_lang_cpp+lang_python*x_lang_python +
ide_visual_studio  * x_ide_visual_studio +
xp_senior * x_senior +
lang_cpp_ide_visual_studio * x_lang_cpp * x_ide_visual_studio +
lang_python_ide_visual_studio * x_lang_python *x_ide_visual_studio +
lang_python_xp_senior * x_lang_python * x_senior +
lang_cpp_xp_senior * x_lang_cpp * x_senior +
ide_visual_studio_xp_senior * x_senior * x_ide_visual_studio +
lang_cpp_xp_senior_ide_visual_studio * x_lang_cpp * x_ide_visual_studio * x_senior +
lang_python_xp_senior_ide_visual_studio * x_lang_python * x_ide_visual_studio * x_senior
y_out<- rnorm(N, mean=y, sd = response_std) # This generates a normal distribution
# if(likert)
#  y_out<- findInterval(y_out,vec=c(-Inf,-2.5,-1, 1,2.5,Inf)+ref)
# this is fairly unbiased for standard deviation of 1 in the responses and 0 mean.
# That is why we add the value of the reference group.
# Here the reference will have a mean of 3 in likert scale
return(y_out)
}
set.seed(8649)
language_java <- c(0,0)
language_cpp <- c(1,0)
language_python <- c(0,1)
i_itelij <- c(0)
i_visual_studio <- c(1)
experience_junior <- c(0)
experience_senior <- c(1)
g1 <- data.frame(
Language= rep('Java', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_itelij, X_experience = experience_junior)
)
g2 <- data.frame(
Language= rep('C++', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_itelij, X_experience = experience_junior)
)
g3 <- data.frame(
Language= rep('Python', N), IDE= rep('Intelij', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_itelij, X_experience = experience_junior)
)
g4 <- data.frame(
Language= rep('Java', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_visual_studio, X_experience = experience_junior)
)
g5 <- data.frame(
Language= rep('C++', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_visual_studio, X_experience = experience_junior)
)
g6 <- data.frame(
Language= rep('Python', N), IDE= rep('Visual Studio', N), Experience=rep('Junior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_visual_studio, X_experience = experience_junior)
)
g7 <- data.frame(
Language= rep('Java', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_itelij, X_experience = experience_senior)
)
g8 <- data.frame(
Language= rep('C++', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_itelij, X_experience = experience_senior)
)
g9 <- data.frame(
Language= rep('Python', N), IDE= rep('Intelij', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_itelij, X_experience = experience_senior)
)
g10 <- data.frame(
Language= rep('Java', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_java , X_ide = i_visual_studio, X_experience = experience_senior)
)
g11 <- data.frame(
Language= rep('C++', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_cpp , X_ide = i_visual_studio, X_experience = experience_senior)
)
g12 <- data.frame(
Language= rep('Python', N), IDE= rep('Visual Studio', N), Experience=rep('Senior', N),
y=amount_of_code_model(N=N, X_lang =language_python , X_ide = i_visual_studio, X_experience = experience_senior)
)
n<-1
all_groups <- list(g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12)
#creating an empty data frame from an existing one (with the same column)
d<-g1[0,]
for(g in all_groups) {
d<-rbind(d, dplyr::sample_n(g, size=n)) #appending rows at the end for every group
}
d$Language<-as.factor(d$Language)
d$IDE<-as.factor(d$IDE)
d$Experience<-as.factor(d$Experience)
d <- within(d, Language <- relevel(Language,ref=2))
summary(d)
levels(d$Language) <- c("Java","C++", "Python")
levels(d$IDE) <- c("Intelij", "Visual Studio")
levels(d$Experience) <- c("Junior", "Senior")
m1 <- lm(y ~ Language*IDE*Experience, data=d)
summary(m1)
